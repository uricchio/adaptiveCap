initialize() {
 initializeMutationRate(1e-6);
 initializeMutationType("m1", 0.5, "f", 0.0); // neutral
 initializeMutationType("m2", 0.5, "g", 0.1, 0.01); // QTLs
 initializeMutationType("m3", 0.5, "g", -0.1, 0.01); // QTLs
 m2.convertToSubstitution = F;
 m3.convertToSubstitution = F;
 initializeGenomicElementType("g1", m1, 1);
 initializeGenomicElementType("g2", m2, 1);
 initializeGenomicElementType("g3", m3, 1);
 initializeRecombinationRate(2e-7);
 defineConstant("h2", 0.5); 

 base = 0;
 while (base < 1000000) {
    // make a non-coding region
    nc_length = rdunif(1, 100, 5000);
    initializeGenomicElement(g1, base, base + nc_length - 1);
    base = base + nc_length;

    // make first exon
    ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
    initializeGenomicElement(g1, base, base + ex_length - 1);
    base = base + ex_length;

    // make additional intron-exon pairs
    do
    {
     in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10;

     if (runif(1) < 0.5) {
         initializeGenomicElement(g2, base, base + in_length - 1);
     } else {
         initializeGenomicElement(g3, base, base + in_length - 1);
     }
     base = base + in_length;

     ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
     initializeGenomicElement(g1, base, base + ex_length - 1);
     base = base + ex_length;
    }
   while (runif(1) < 0.8); // 20% probability of stopping
  }

 // final non-coding region
 nc_length = rdunif(1, 100, 5000);
 initializeGenomicElement(g1, base, base + nc_length - 1);

}  


mutationEffect(m2) { return 1.0; }
mutationEffect(m3) { return 1.0; }

1 early() { sim.addSubpop("p1", 500); }

1: late() {

    // sum the additive effects of QTLs
    inds = sim.subpopulations.individuals;
    additive = inds.sumOfMutationsOfType(m2);
    additive = additive+inds.sumOfMutationsOfType(m3);

    // model environmental variance, according to the target heritability
    V_A = mean((additive)^2) - mean(additive)^2;
    V_E = (V_A - h2 * V_A) / h2; // from h2 == V_A / (V_A + V_E)
    env = rnorm(size(inds), 0.0, sqrt(V_E));

    // set fitness effects and remember phenotypes
    phenotypes = additive + env;
    myS = 0.001*S*sqrt(V_A+V_E);
    fits = 1 - (3-phenotypes)^2 * myS;
    inds.fitnessScaling = ifelse(fits < 0.0, 0.0, fits);
}

4000 late() {
    inds = p1.sampleIndividuals(500);
    g = inds.genomes;

    for (gen in 0:(length(inds)-1))
        writeFile("../simOut/traits/trait.S."+S+"."+simID+".txt", paste(sum(inds[gen].sumOfMutationsOfType(m2))+sum(inds[gen].sumOfMutationsOfType(m3))),append=T); 
    g.outputVCF("../simOut/vcfs/geno.S."+S+"."+simID+".vcf", simplifyNucleotides=F); 

} 

